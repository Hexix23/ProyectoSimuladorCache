#include <stdio.h>
#include <stdlib.h>
#include <string.h>



/*
--
--   
--
--
--
--
--
--
--
*/
















int numfallos = 0;
float tiempoglobal = 0;
int acceso;
int* camposD;

typedef struct{
    short int ETQ;
    short int Datos[8];
}T_LINEA_CACHE;

void fallo_memoria(T_LINEA_CACHE* lineaCache);
int leerFichero(FILE *f);
int* separarCampos(int acceso);
void inicializarCache(T_LINEA_CACHE*  lineaCache); 
void imprimir_datos(T_LINEA_CACHE* lineaCache);



/* Función principal */
int main (int argc,char **argv){
	FILE *f = NULL;
	FILE *ram;
	unsigned char RAM[1024];
	
	T_LINEA_CACHE lineaCache[4];


   /* if(){

    }else{


    }*/






/*Inicializamos Cache*/
	inicializarCache(lineaCache);

/*Leemos RAM*/
	ram = fopen("RAM.bin", "rb"); //abre archivo en modo binario
	if (ram ==NULL){
		printf("el fichero ram.bin no existe");
		exit(-1);
	}
	rewind(ram);  // no entiendo muy bien la funcion del rewind
	fgets(RAM, 1024, ram);
	fclose(ram);

/*leemos fichero*/
	f = fopen("accesos_memoria.txt", "r");	
	if (f ==NULL){
		printf("el fichero acceso_memoria.txt no existe");
		exit(-1);
	}
	
	while (!feof(f)){
		acceso = leerFichero(f);
		separarCampos(acceso);
	}
	fclose(f);




 /* if (f==NULL){
   printf("Error al abrir fichero.txt");
   return -1;
  }else if (f2==NULL){
   	printf("Error al abrir fichero2.txt");
   		return -1;
  	}*/
   return 0;
}

int leerFichero(FILE *f){
	char numADDR[5];  //¿porque es un array de 5?

	fscanf(f, "%s", numADDR);
	return (int)strtol(numADDR, NULL, 16);
}
int* separarCampos(int acceso){
	int camposD[4];
	
	camposD[0] = acceso & 0b111;
	camposD[1] = acceso >>= 3 & 0b11;
	camposD[2] = acceso >> 2 & 0b11111;
	camposD[3] = acceso >> 3 & 0b1111111;
	
	return camposD;
}

void inicializarCache(T_LINEA_CACHE* lineaCache){
	int i;
	int a = 4;
	
	while (a-- > 0){
		i = 8;
		lineaCache[a].ETQ = 0xFF;
		while (i-- > 8){
			lineaCache[a].Datos[i] = 0; 
		}
		
	}
	
}
void fallo_memoria(T_LINEA_CACHE* lineaCache){
	int a;
	if(camposD[2] != lineaCache[a].ETQ){
		numfallos+=1;
		printf("T: %d, Fallo de CACHE %d, ADDR %04X ETQ %X linea %02X palabra %02X bloque %02X", tiempoglobal,numfallos,acceso ,camposD[0],camposD[1],camposD[2],camposD[3]);
		tiempoglobal+=10;

		printf("\n cargando el bloque %02X y la linea %02X",camposD[3], camposD[1]);
	}else
	{
		printf(" T: %d, Acierto de CACHE, ADDR %04X ETQ %X linea %02X palabra %02X DATO %02X", tiempoglobal,numfallos,acceso ,camposD[0],camposD[1],camposD[2],camposD[3]);
	}
	

	

}
void imprimir_datos(T_LINEA_CACHE* lineaCache){
	int i;
	int a;
	for(a=0; a<4; a++){
		printf("\n ETQ: %X",lineaCache[a].ETQ);
		printf("\t datos: ");
		for(i=0; i<8;i++){
			printf("%X",lineaCache[a].Datos[i]);
		}

	}

}
